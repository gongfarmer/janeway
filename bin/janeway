#!/usr/bin/env ruby

# frozen_string_literal: true

require 'json'
require 'optparse'

# FIXME: delete from final version?
$LOAD_PATH << "#{__dir__}/../lib/"
require 'janeway'

SCRIPT_NAME = File.basename($PROGRAM_NAME)
HELP = <<~HELP_TEXT.freeze
  Usage:
    #{SCRIPT_NAME} [QUERY] [FILENAME]

  Purpose:
    Print the result of applying a JsonPath query to a JSON input.

    QUERY is a JsonPath query. Quote it with single quotes to avoid shell errors.

    FILENAME is the path to a JSON file to use as input.
    Alternately, input JSON can be provided on STDIN.
    If input is not provided then the query is just checked for correctness.

    For an introduction to JsonPath, see https://goessner.net/articles/JsonPath/
    For the complete reference, see https://www.rfc-editor.org/info/rfc9535

  Examples:
    #{SCRIPT_NAME} '$.store.book[*].author' input.json
    cat input.json | #{SCRIPT_NAME} '$.store.book[*].author'

HELP_TEXT

# Command-line options
Options = Struct.new(:query, :query_file, :input, :compact_output, :delete, :verbose)

# Parse the command-line arguments.
# This includes both bare words and hyphenated options.
#
# @param argv [Array<String>]
def parse_args(argv)
  # parse command-line options
  argv << '--help' if argv.empty?
  options = parse_options(argv)

  # Next get jsonpath query and input jsonn
  options.query = read_query(options.query_file, argv)
  options.input = read_input(argv.first)
  options
end

# Parse the command-line options.
#
# @param argv [Array<String>]
def parse_options(argv)
  options = Options.new
  op = OptionParser.new do |opts|
    opts.banner = HELP
    opts.separator('Options:')

    opts.on('-q', '--query FILE', 'Read jsonpath query from file') { |o| options.query_file = o }
    opts.on('-c', '--compact', 'Express result in compact json format') { options.compact_output = true }
    opts.on('-d', '--delete', 'Print the input, with matching values deleted') { options.delete = true }
    opts.on('--version', 'Show version number') { abort(Janeway::VERSION) }
    opts.on('-h', '--help', 'Show this help message') { abort(opts.to_s) }
  end
  op.parse!(argv)
  options
end

# Read jsonpath query from file or command-line arguments
#
# @param path [String,nil] query path, or nil if not provided
# @param argv [Array<String>] command line arguments
def read_query(path, argv)
  return File.read(path).strip if path

  # Assume query is the first arg that is not a filename
  query = argv.reject { File.exist?(_1) }.first
  abort('No JSONPath query received, provide one on the command line.') unless query

  argv.delete(query)
  query
end

# Read input json from file or STDIN
# @param path [String,nil] json file path, or nil if not provided
# @return [Hash, Array] un-serialized json, as ruby objects
def read_input(path)
  json =
    if path
      File.read(path)
    elsif !$stdin.tty?
      $stdin.read
    else
      return # no input json provided
    end
  parse_json(json)
end

# Parse JSON, and abort if it is invalid
# @param json [String]
# @return [Hash, Array] un-serialized json, as ruby objects
def parse_json(json)
  JSON.parse(json)
rescue JSON::JSONError => e
  # JSON error messages may include the entire input, so limit how much is printed.
  msg = e.message[0..256]
  msg += "\n..." if e.message.length > 256
  abort "Input is not valid JSON: #{msg}"
end

# Just pares the query ane then exit.
# Useful for testing whether a query is valid.
# @param query [String] jsonpath
def parse_query_and_exit(query)
  Janeway.compile(query)
  puts 'Query is valid. Provide input json to run the query.'
  exit(0)
end

# @param options [Options]
def main(options)
  parse_query_and_exit(options.query) unless options.input

  enum = Janeway.on(options.query, options.input)
  if options.delete
    results = enum.delete
    if options.compact_output
      puts JSON.generate(options.input)
    else
      puts JSON.pretty_generate(options.input)
    end
    exit(0)
  else
    results = enum.search
  end

  if options.compact_output
    puts JSON.generate(results)
  else
    puts JSON.pretty_generate(results)
  end
end

begin
  options = parse_args(ARGV.dup)
  main(options)
rescue Janeway::Error => e
  abort e.detailed_message
rescue Interrupt, Errno::EPIPE
  abort("\n")
end
