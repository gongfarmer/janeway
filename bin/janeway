#!/usr/bin/env ruby

# frozen_string_literal: true

require 'json'
require 'optparse'

# FIXME: delete from final version?
$LOAD_PATH << "#{__dir__}/../lib/"
require 'janeway'

SCRIPT_NAME = File.basename($PROGRAM_NAME)
HELP = <<~HELP_TEXT.freeze
  Usage:
    #{SCRIPT_NAME} [QUERY] [FILENAME]

  Purpose:
    Print values from the input data that match the given JSONPath query.

    Alternatively, use one of the action flags to modify values from the input JSON specified by the query.

    QUERY is a JSONPath query. Quote it with single quotes to avoid shell errors.

    FILENAME is the path to a JSON file to use as input data.
    Alternately, JSON can be provided on STDIN.
    If data is not provided then the query is just checked for correctness.

    For an introduction to JSONPath, see https://goessner.net/articles/JsonPath/
    For the complete reference, see https://www.rfc-editor.org/info/rfc9535

  Examples:
    #{SCRIPT_NAME} '$.store.book[*].author' data.json
    cat data.json | #{SCRIPT_NAME} '$.store.book[*].author'

HELP_TEXT

# Command-line options
Options = Struct.new(
  :query, :query_file, :action, :value, :value_given, :data,
  :compact_output, :verbose, keyword_init: true
)

# Parse the command-line arguments.
# This includes both bare words and hyphenated options.
#
# @param argv [Array<String>]
def parse_args(argv)
  # parse command-line options
  argv << '--help' if argv.empty?
  options = parse_options(argv)

  # Get jsonpath query and input json
  options.query = read_query(options.query_file, argv)
  options.data = read_input(argv.first)
  if %i[insert replace].include?(options.action) && !options.value_given
    abort("Need value for #{options.action}, use -v or -V")
  end
  options
end

# Parse the command-line options.
#
# @param argv [Array<String>]
def parse_options(argv)
  options = Options.new(action: :search)
  op = OptionParser.new do |opts|
    opts.banner = HELP
    opts.separator('Options:')

    opts.on('-q', '--query FILE', 'Read jsonpath query from file') { |o| options.query_file = o }
    opts.on('-c', '--compact', 'Print result in compact json format') { options.compact_output = true }
    opts.on('-v', '--value STRING', 'VALUE for insert or replace (str/number/null/true/false)') do |o|
      options.value = read_value(o)
      options.value_given = true # must track this separately since value may be false / nil
    end
    desc =
      'JSON file containing VALUE for insert or replace ' \
      '(bare literals are valid JSON, eg. 9, "string", null)'
    opts.on('-V', '--value-file FILENAME', desc) do |o|
      options.value = read_value_file(o)
      options.value_given = true
    end
    opts.separator('Actions:')
    opts.on('-d', '--delete', 'Print data, with matches deleted') { options.action = :delete }
    opts.on('-r', '--replace', 'Print data, with matches replaced by VALUE') { options.action = :replace }
    opts.on('-i', '--insert', 'Print data, with VALUE inserted at query location') { options.action = :insert }
    opts.on('-p', '--paths', 'List normalized path for each match') { options.action = :paths }
    opts.on('--version', 'Show version number') { abort(Janeway::VERSION) }
    opts.on('-h', '--help', 'Show this help message') { abort(opts.to_s) }
  end
  op.parse!(argv)
  options
end

# Read jsonpath query from file or command-line arguments
#
# @param path [String,nil] query path, or nil if not provided
# @param argv [Array<String>] command line arguments
def read_query(path, argv)
  return File.read(path).strip if path

  # Assume query is the first arg that is not a filename
  query = argv.reject { File.exist?(_1) }.first
  abort('No JSONPath query received, provide one on the command line.') unless query

  argv.delete(query)
  query
end

# Read input json from file or STDIN
# @param path [String,nil] json file path, or nil if not provided
# @return [Hash, Array] un-serialized json, as ruby objects
def read_input(path)
  json =
    if path
      File.read(path)
    elsif !$stdin.tty?
      $stdin.read
    else
      return # no input json provided
    end
  parse_json(json)
end

# Read insert/replacement value from file
# @return [Array,Hash,String,Numeric,nil]
def read_value_file(path)
  abort("File not readable: #{path}") unless File.exist?(path)

  parse_json File.read(path)
end

# Read insert/replacement value from command-line argument
# @return [Integer, Float, String]
def read_value(value_str)
  case value_str
  when 'null' then nil
  when 'true' then true
  when 'false' then false
  when /^\d+$/ then value_str.to_i # integer
  when /^\d+\.\d+$/ then value_str.to_f # float
  else value_str # string
  end
end

# Parse JSON, and abort if it is invalid
# @param json [String]
# @return [Hash, Array] un-serialized json, as ruby objects
def parse_json(json)
  JSON.parse(json)
rescue JSON::JSONError => e
  # JSON error messages may include the entire data, so limit how much is printed.
  msg = e.message[0..256]
  msg += "\n..." if e.message.length > 256
  abort "Input data is not valid JSON: #{msg}"
end

# Just pares the query ane then exit.
# Useful for testing whether a query is valid.
# @param query [String] jsonpath
def parse_query_and_exit(query)
  Janeway.parse(query)
  puts 'Query is valid. Provide input json to run the query.'
  exit(0)
end

# @param options [Options]
def main(options)
  parse_query_and_exit(options.query) unless options.data

  enum = Janeway.enum_for(options.query, options.data)
  results =
    case options.action
    when :search then enum.search
    when :paths then enum.map { |_, _, _, path| path }
    when :replace
      enum.replace(options.value)
      options.data
    when :insert
      enum.insert(options.value)
      options.data
    when :delete
      enum.delete
      options.data
    else
      raise "Unknown action: #{options.action}"
    end

  if options.compact_output
    puts JSON.generate(results)
  else
    puts JSON.pretty_generate(results)
  end
end

begin
  options = parse_args(ARGV.dup)
  main(options)
rescue Janeway::Error => e
  warn "Error: #{e.message}\nQuery: #{e.query}\n"
  warn "       #{' ' * e.location.col}^" if e.location # point to the character at the location index
  exit(1)
rescue Interrupt, Errno::EPIPE
  abort("\n")
end
